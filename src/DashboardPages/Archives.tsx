import { Button } from "@nextui-org/react";
import { useMemo } from "react";
import { User } from "@nextui-org/user";
import { getAllApprovedUsersData } from "@/backendapi/user";
import { useLoaderData } from "react-router-dom";
import jsPDF from "jspdf";
import logo from "@/assets/redcross_logo.png";
// Define a type for the user object
interface User {
  _id: string;
  name: string;
  email: string;
  address: string;
  orNumber: number;
  contact: string;
  gender: string;
  password: string;
  userType: string;
  certificateApproved: boolean;
  profilePictureUrl: string;
  certificateUrl: string;
  category: string;
  dateStarted: string;
  createdAt: string;
  updatedAt: string;
  __v: number;
}

type Users = {
  users: User[];
};

export const loader = async () => {
  let users = await getAllApprovedUsersData();

  return { users };
};

const Archives = () => {
  const { users } = useLoaderData() as Users;

  const groupedUsers = useMemo(() => {
    return users.reduce<{ [key: string]: User[] }>((acc, user) => {
      // Format the updatedAt date as "Month Day, Year"
      const date = new Date(user.updatedAt).toLocaleDateString("en-US", {
        month: "long",
        day: "numeric",
        year: "numeric",
      });
      if (!acc[date]) {
        acc[date] = [];
      }
      acc[date].push(user);
      return acc;
    }, {});
  }, []);

  const handleDownload = (date: string, users: User[]) => {
    const doc = new jsPDF();

    // Header configuration
    const logoUrl = logo; // Replace with your logo's URL or base64 image
    const headerTitle = `User Report - ${date}`;
    const headerSubtitle = "Generated by Red Cross Cavite";
    const reportDate = `Report Date: ${new Date().toLocaleDateString("en-US")}`;
    const headerYPosition = 10;

    // Add logo to the header
    const logoWidth = 30; // Adjust logo width as needed
    const logoHeight = 30; // Adjust logo height as needed
    doc.addImage(logoUrl, "PNG", 10, headerYPosition, logoWidth, logoHeight);

    // Add text to the header
    doc.setFontSize(16);
    doc.text(headerTitle, 50, headerYPosition + 10); // Adjust the text position
    doc.setFontSize(12);
    doc.text(headerSubtitle, 50, headerYPosition + 18);
    doc.text(reportDate, 50, headerYPosition + 26);

    // Table starting position
    let startX = 10;
    let startY = 50;
    const rowHeight = 10;
    const colWidths = [10, 30, 40, 50, 30, 30, 20, 30]; // Adjust column widths as needed

    // Table header
    const columns = [
      "No.",
      "Name",
      "Email",
      "Address",
      "Contact",
      "Category",
      "Gender",
      "Started",
    ];
    let currentY = startY;

    // Draw the header row
    doc.setFontSize(10);
    doc.setFillColor(255, 0, 0); // Red background
    doc.setTextColor(255, 255, 255); // White text
    doc.rect(
      startX,
      currentY,
      colWidths.reduce((a, b) => a + b),
      rowHeight,
      "F"
    ); // Filled rectangle for header
    let currentX = startX;
    columns.forEach((col, i) => {
      doc.text(col, currentX + 2, currentY + 8); // Slight padding
      currentX += colWidths[i];
    });

    currentY += rowHeight;

    // Reset text color for rows
    doc.setTextColor(0, 0, 0); // Black text

    // Draw data rows
    users.forEach((user, index) => {
      currentX = startX;
      const row = [
        `${index + 1}`,
        user.name,
        user.email,
        user.address,
        user.contact,
        user.category,
        user.gender,
        user.dateStarted,
      ];

      // Stripe the rows
      if (index % 2 === 0) {
        doc.setFillColor(240, 240, 240); // Light gray background for striped rows
        doc.rect(
          startX,
          currentY,
          colWidths.reduce((a, b) => a + b),
          rowHeight,
          "F"
        );
      }

      row.forEach((cell, i) => {
        doc.text(cell, currentX + 2, currentY + 8); // Slight padding
        currentX += colWidths[i];
      });

      // Draw row border
      currentY += rowHeight;
      if (currentY > 280) {
        // Add new page if content overflows
        doc.addPage();
        currentY = startY;
      }
    });

    // Final bottom border for the table
    doc.line(
      startX,
      currentY,
      startX + colWidths.reduce((a, b) => a + b),
      currentY
    );

    // Save the PDF
    doc.save(`User_Report_${date.replace(/ /g, "_")}.pdf`);
  };

  return (
    <div className="flex flex-col gap-5">
      <h2>Archives</h2>
      <div>
        {Object.keys(groupedUsers).map((date) => (
          <Button onClick={() => handleDownload(date, groupedUsers[date])}>
            {date}
          </Button>
        ))}
      </div>
    </div>
  );
};

export default Archives;
